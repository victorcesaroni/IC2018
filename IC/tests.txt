/*{
	Matrix<int> test;
	test.Create(2, 4);
	test.Fill(0);
	test[0][0] = 1;
	test[0][1] = 2;
	test[0][2] = 3;
	test[0][3] = 4;
	//test[1][0] = 5;
	//test[1][1] = 6;
	test[1][2] = 7;
	test[1][3] = 8;
	for (int i = 0; i < 2; i++)
	{
	for (int j = 0; j < 4; j++)
	{
	printf("%d ", test[i][j]);
	}
	printf("\n");
	}
	}

	{
	Matrix<std::vector<int>> test;
	test.Create(2, 4);
	test.Fill(std::vector<int> {0});
	test[0][0].push_back(10);
	test[0][1].push_back(20);
	test[0][2].push_back(30);
	test[0][3].push_back(40);
	test[1][1].push_back(60);

	for (int i = 0; i < 2; i++)
	{
	for (int j = 0; j < 4; j++)
	{
	printf("(%d,%d) ", i, j);
	for (auto& k : test[i][j])
	printf("%d ", k);
	printf("\n");
	}
	}
	}*/

	/*{
		std::vector<std::vector<int>> v = { { 1 },{ 2 },{ 3 },{ 4 } };

		Permutator<std::vector<int>> p(v);

		printf("%dx\n", p.permutations.size());
		for (auto& x : p.permutations)
		{
			for (auto& y : x)
			{
				printf("%d ", y[0]);
			}
			printf("\n");
		}
	}*/

